Repository Documentation
This document provides a comprehensive overview of the repository's structure and contents.
The first section, titled 'Directory/File Tree', displays the repository's hierarchy in a tree format.
In this section, directories and files are listed using tree branches to indicate their structure and relationships.
Following the tree representation, the 'File Content' section details the contents of each file in the repository.
Each file's content is introduced with a '[File Begins]' marker followed by the file's relative path,
and the content is displayed verbatim. The end of each file's content is marked with a '[File Ends]' marker.
This format ensures a clear and orderly presentation of both the structure and the detailed contents of the repository.

Directory/File Tree Begins -->

employeeinfo/
├── service.js

<-- Directory/File Tree Ends

File Content Begin -->
[File Begins] service.js
const lodash = require("lodash");
const axios = require('axios');

const translation = require("../../../../../../utils/translation");
const helper = require("../../../../../../utils/helper");
const reqContext = require("../../../../../../utils/requestcontext");

const env = require("../../../../../../config/environment/environment").getConfig();

const FunctionReturn = require("../../../../../../models/common/FunctionReturn").FunctionReturn;

class PRTRService {

    constructor() {}

    getAPIToken(encryptText) {

        let functionReturn = new FunctionReturn();

        try {

            let secretKey = env[reqContext.getTenantCode()].serverConnSecretKey;
            functionReturn = helper.decrypt(encryptText, secretKey);

        } catch(error) {
            helper.logMessage('error', error.stack, 'tenant/prtr/interfaceout/employeeinfo/service - getIZignToken', '', '', '', '');
            functionReturn.success = false;
            functionReturn.message = translation.getTranslateText('common.error.exception');
        }
        return functionReturn;
    }

    async updateEmpInfo(params) {

        let functionReturn = new FunctionReturn();

        try {

            let { interfaceTemplateField = {}, outputDataList = [] } = params;
            let interfaceTemplate = lodash.get(interfaceTemplateField, 'template', '');
            let urlHost = lodash.get(interfaceTemplate, 'host', '');
            let sftpAlgorithm = lodash.get(interfaceTemplate, 'sftpAlgorithm', '');
            let encryptApiToken = '';
            let clientID = '';

            if (sftpAlgorithm) {
                sftpAlgorithm = JSON.parse(sftpAlgorithm);
                clientID = lodash.get(sftpAlgorithm, 'clientID', '');
                encryptApiToken = lodash.get(sftpAlgorithm, 'token', '');
            }

            let apiTokenResult = this.getAPIToken(encryptApiToken);

            let apiToken = '';
            if (apiTokenResult.success) {
                apiToken = apiTokenResult.result;
            } else {
                return functionReturn;
            }

            try {

                let outputPayload = lodash.map(outputDataList, (val) => val.payload);
                let data = JSON.stringify({"EmployeeList": outputPayload});
                let config = {
                    method: 'post',
                    maxBodyLength: Infinity,
                    url: urlHost,
                    headers: {
                        'Token': apiToken,
                        'Content-Type': 'application/json',
                        'ClientID': clientID,
                    },
                    data : data
                };

                let response = await axios.request(config)
                functionReturn.result = lodash.get(response, 'data', '');
                functionReturn.success = true;

            } catch (error) {
                helper.logMessage('error', error.stack, 'tenant/prtr/interfaceout/employeeinfo/service - updateEmpInfo (Call api) ', '', '', '', '');
                functionReturn.result = null;
                functionReturn.success = false;
                functionReturn.message = `API update employee info error: ${error.message}`;
            }

        } catch(error) {
            helper.logMessage('error', error.stack, 'tenant/prtr/interfaceout/employeeinfo/service - updateEmpInfo', '', '', '', '');
            functionReturn.success = false;
            functionReturn.message = translation.getTranslateText('common.error.exception');
        }

        return functionReturn;
    }

}

exports.PRTRService = PRTRService;
[File Ends] service.js


<-- File Content Ends

