Repository Documentation
This document provides a comprehensive overview of the repository's structure and contents.
The first section, titled 'Directory/File Tree', displays the repository's hierarchy in a tree format.
In this section, directories and files are listed using tree branches to indicate their structure and relationships.
Following the tree representation, the 'File Content' section details the contents of each file in the repository.
Each file's content is introduced with a '[File Begins]' marker followed by the file's relative path,
and the content is displayed verbatim. The end of each file's content is marked with a '[File Ends]' marker.
This format ensures a clear and orderly presentation of both the structure and the detailed contents of the repository.

Directory/File Tree Begins -->

benefitposting/
├── serviceapi.js

<-- Directory/File Tree Ends

File Content Begin -->
[File Begins] serviceapi.js
const lodash = require("lodash");
const axios = require('axios');

const translation = require('../../../../utils/translation');
const helper = require('../../../../utils/helper');
const reqContext = require('../../../../utils/requestcontext');
const services = require("../../../../utils/interface/services");
const env = require('../../../../config/environment/environment').getConfig();
const FunctionReturn = require('../../../../models/common/FunctionReturn').FunctionReturn;

const grantType = "client_credentials";
const pyPostingTriggeConnCode = "PYPOSTINGTRIGGER";
const pyPostingTokenRequestConnCode = "PYPOSTINGTOKENREQUES";
const headers = { "Content-Type": "application/x-www-form-urlencoded" };

class ServiceApi {

    constructor() {}


    async apiTokenRequest() {
        let functionReturn = new FunctionReturn();

        try {

            let serverConn = await services.getServerConnctionByConnCode(pyPostingTokenRequestConnCode);

            if (!serverConn.success) {
                functionReturn = serverConn;
                return functionReturn;
            }

            let clientID = lodash.get(serverConn, 'result[0].username', '');
            let encryptClientSecret = lodash.get(serverConn, 'result[0].password', '');
            let host = lodash.get(serverConn, 'result[0].host', '');

            let encryptPath = env[reqContext.getTenantCode()].serverConnSecretKey;
            let clientSecret = helper.decrypt(encryptClientSecret, encryptPath);

            if (!clientSecret.success) {
                functionReturn = serverConn;
                return functionReturn;
            }

            let authParam = new URLSearchParams({
                grant_type: grantType,
                client_id: clientID,
                client_secret: lodash.get(clientSecret, 'result', ''),
            });

            try {
                
                let response = await axios.post(host, authParam, { headers: headers });
                functionReturn.result = lodash.get(response, 'data.access_token', '');
                
            } catch (error) {
                functionReturn.success = false;
                functionReturn.message = translation.getTranslateText('tenant.assetwise.benefitPosting.error.apiTokenRequest')
                return functionReturn;
            }

            functionReturn.success = true;

        } catch (error) {
            helper.logMessage('error', error.stack, 'tenant/assetwise/benefitposting/serviceapi - apiTokenRequest', '', '', '', '');
            functionReturn.success = false;
            functionReturn.message = translation.getTranslateText('common.error.exception');  
        }

        return functionReturn;
    }

    async submitApiTriggers(fileName) {

        let functionReturn = new FunctionReturn();

        try {

            let resultToken = await this.apiTokenRequest();

            if (!resultToken.success) {
                functionReturn = resultToken;
                return functionReturn;
            }

            let serverConn = await services.getServerConnctionByConnCode(pyPostingTriggeConnCode);
            
            if (!serverConn.success) {
                functionReturn = serverConn;
                return functionReturn;
            }
            
            try {
                
                let host = lodash.get(serverConn, 'result[0].host', '');
                let irpaApiKey = lodash.get(serverConn, 'result[0].username', '');
                let data = JSON.stringify({ input: { ipFileName: fileName } });
                let authorization = lodash.get(resultToken, 'result', '');
                  
                let config = {
                    method: 'post',
                    url: host,
                    headers: { 
                        'irpa-api-key': irpaApiKey,
                        'Authorization': `Bearer ${authorization}`, 
                        'Content-Type': 'application/json'
                    },
                    data : data
                };

                let response = await axios(config);
                let messageText = lodash.get(response, 'statusText', '');
                functionReturn.message = messageText;
                  
            } catch (error) {
                helper.logMessage('error', error.stack, 'tenant/assetwise/benefitposting/serviceapi - submitApiTriggers', '', '', '', '');
                functionReturn.message = translation.getTranslateText('tenant.assetwise.benefitPosting.error.submitApiTriggers');
                functionReturn.success = false;
            }

            functionReturn.success = true;

        } catch (error) {
            helper.logMessage('error', error.stack, 'tenant/assetwise/benefitposting/serviceapi - submitApiTriggers', '', '', '', '');
            functionReturn.success = false;
            functionReturn.message = translation.getTranslateText('common.error.exception');  
        }
        return functionReturn;
    }

}

exports.ServiceApi = ServiceApi;
[File Ends] serviceapi.js


<-- File Content Ends

